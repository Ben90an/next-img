{"version":3,"file":"static/webpack/static/development/pages/reference.js.bb5c106636725d52d26c.hot-update.js","sources":["webpack:///./src/content/reference.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Configuration`}</h2>\n    <p>{`Default plugin configuration options:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  breakpoints: [768],\n  densities: ['1x', '2x'],\n\n  // the directory within Next.js build output\n  imagesDir: 'images',\n  // the output image name template\n  imagesName: '[name]-[size]@[density]-[hash].[ext]',\n  // advanced - customise the image public path\n  imagesPublicPath: null,\n  // advanced - customise the image output path\n  imagesOutputPath: null,\n\n  // persistent cache allows for fast deploy and\n  // development workflow by avoiding reprocessing\n  // images that were previously processed\n  persistentCache: true,\n  persistentCacheDir: 'resources',\n\n  // this directory within .next is used in case persistent cache is turned off\n  cacheDir: path.join('cache', 'next-img'),\n\n  // image quality configuration\n  jpeg: {\n    quality: 80,\n    webp: {\n      quality: 80,\n      reductionEffort: 6,\n    },\n  },\n\n  png: {\n    quality: 100,\n    webp: {\n      quality: 80,\n      reductionEffort: 6,\n      lossles: true,\n    },\n  },\n}\n`}</code></pre>\n    <h2>{`Import Params`}</h2>\n    <p>{`When importing an image, you can use query parameters to customise the optimisation:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`sizes`}</strong>{` - a list of comma separated sizes you will be showing images at. Note that you do not need to take into account the pixel densities here. That is, if you're showing an image at `}<inlineCode parentName=\"li\">{`320px`}</inlineCode>{` wide on your website, simply specify `}<inlineCode parentName=\"li\">{`320`}</inlineCode>{` here, the plugin will produce any necessary larger versions based on the `}<inlineCode parentName=\"li\">{`densities`}</inlineCode>{` configuration.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`densities`}</strong>{` - a list of comma separated densities you need each image size to be produced at. By default `}<inlineCode parentName=\"li\">{`1x`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`2x`}</inlineCode>{` sizes of images will be produced, specify `}<inlineCode parentName=\"li\">{`1x`}</inlineCode>{` if you want to produce only one image per size, or `}<inlineCode parentName=\"li\">{`1x,2x,3x`}</inlineCode>{`, etc. if you want more densities.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`jpeg / png / webp`}</strong>{` - quality configuration options for the output image. Refer to `}<a parentName=\"li\" {...{\n          \"href\": \"https://sharp.pixelplumbing.com/api-output\"\n        }}>{`sharp documentation`}</a>{` to find the available options for each output format.`}</li>\n    </ul>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import img1 from './images/img.jpg'\nimport img2 from './images/img.jpg?sizes=375,900'\nimport img3 from './images/img.jpg?sizes=375,900&densities=1x'\nimport img4 from './images/img.jpg?sizes=375,900&densities=1x,2x,3x'\nimport img5 from './images/img.jpg?sizes=375,900&densities=1x,2x,3x&jpeg[quality]=70&webp[quality]=70'\n`}</code></pre>\n    <h2>{`Picture Props`}</h2>\n    <p><inlineCode parentName=\"p\">{`next-img`}</inlineCode>{` comes with a React component making embedding images easier.`}</p>\n    <p>{`Here are the props this component access:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`src`}</strong>{` the imported image, or an array of imported images.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`breakpoints`}</strong>{` - a list of breakpoints to override the global configuration.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`sizes`}</strong>{` - a custom `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#How_do_you_create_responsive_images\"\n        }}>{`html sizes attribute`}</a>{`, by default the sizes attribute is generated based on the available images and breakpoints.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`the rest of the props and ref`}</strong>{` are forwarded to the `}<inlineCode parentName=\"li\">{`img`}</inlineCode>{` tag. This allows the use of attributes such as `}<inlineCode parentName=\"li\">{`alt`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`loading=\"lazy\"`}</inlineCode>{`, etc..`}</li>\n    </ul>\n    <h4>{`A note on how sizes/media attributes are generated`}</h4>\n    <p>{`When a single image is provided via the `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` prop, then each size will be configured to show up per each breakpoint available using the html `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#How_do_you_create_responsive_images\"\n      }}><inlineCode parentName=\"a\">{`sizes attribute`}</inlineCode></a>{` attribute.`}</p>\n    <p>{`For example, with breakpoints `}<inlineCode parentName=\"p\">{`[375, 768]`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`?sizes=100,400,800`}</inlineCode>{` the `}<inlineCode parentName=\"p\">{`<Picture>`}</inlineCode>{` component will apply the following `}<inlineCode parentName=\"p\">{`sizes`}</inlineCode>{` attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`(max-width: 375px) 100px,\n(max-width: 768px) 400px,\n                   800px\n`}</code></pre>\n    <p>{`When an array of images is provided via the `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` prop, then each image will be configured to show up per each breakpoint available using the html `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#Art_direction\"\n      }}><inlineCode parentName=\"a\">{`media attribute`}</inlineCode></a>{`.`}</p>\n    <p>{`For example, with breakpoints `}<inlineCode parentName=\"p\">{`[375, 768]`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`src=[img1, img2, img3]`}</inlineCode>{` the `}<inlineCode parentName=\"p\">{`<Picture>`}</inlineCode>{` component will apply the following `}<inlineCode parentName=\"p\">{`media`}</inlineCode>{` attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<picture>\n  <source media=\"(max-width: 480px)\" sizes=\"{{img1 width}}\" />\n  <source media=\"(max-width: 768px)\" sizes=\"{{img2 width}}\" />\n  <source sizes=\"{{img3 width}}\" />\n  <img ... />\n</picture>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;;;;A","sourceRoot":""}